#Server configurations:
server.port=8084
spring.data.mongodb.uri=mongodb+srv://RivS:TelranJava47@cluster0.075d4oh.mongodb.net/telran?retryWrites=true&w=majority

server.error.include-message=always
server.error.include-binding-errors=always

#JWT Token
jwt.secret-key=hqUerWWqiExZNqIANXb4Xe8upVEaLtBvOJZkza1+desHl5kyrHSFCnDgI0OGCsT1kGJhWxCfxKvWmj3EAH0wTA==

#Cloudcarafka
spring.kafka.bootstrap-servers=glider.srvs.cloudkafka.com:9094
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=SCRAM-SHA-256
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="ssppshpm" password="uipBeio0BdwVedfCCqy6vhtBDcbeuUpR";

#Spring Cloud Stream
spring.cloud.function.definition=receiveProfile;receiveDataFromProblem;sendData;
#IN (Group4)
# authenticated Profile from Accounting ->
spring.cloud.stream.bindings.receiveProfile-in-0.destination=ssppshpm-authenticated
spring.cloud.stream.bindings.receiveProfile-in-0.group=ssppshpm-authenticatedGroup4
# Problem data ->
spring.cloud.stream.bindings.receiveDataFromProblem-in-0.destination=ssppshpm-problemData
spring.cloud.stream.bindings.receiveDataFromProblem-in-0.group=ssppshpm-problemDataGroup4

#OUT
# To deliver Community data to all Services ->
spring.cloud.stream.bindings.sendData-out-0.destination=ssppshpm-communityData

spring.kafka.consumer.auto-offset-reset=earliest
